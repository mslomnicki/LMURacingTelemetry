name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Get dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build for Windows AMD64
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o lmu-racing-telemetry-windows-amd64.exe .
        
    - name: Build for Linux AMD64
      env:
        GOOS: linux
        GOARCH: amd64
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o lmu-racing-telemetry-linux-amd64 .
        
    - name: Build for macOS AMD64
      env:
        GOOS: darwin
        GOARCH: amd64
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o lmu-racing-telemetry-macos-amd64 .
        
    - name: Build for macOS ARM64
      env:
        GOOS: darwin
        GOARCH: arm64
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o lmu-racing-telemetry-macos-arm64 .
        
    - name: Create release notes
      run: |
        cat > release_notes.md << 'EOF'
        ## LMU Racing Telemetry ${{ steps.version.outputs.VERSION }}
        
        ### Features
        - Real-time telemetry display for Le Mans Ultimate racing simulator
        - Multi-driver simultaneous monitoring
        - CSV logging with auto-generated filenames
        - Dynamic table scaling UI
        - 3-sector timing display (S1, S2, S3)
        
        ### Usage
        ```bash
        # Default connection (localhost:6398)
        ./lmu-racing-telemetry
        
        # Custom host and port
        ./lmu-racing-telemetry -host 192.168.1.100 -port 6399
        ```
        
        ### Binaries
        - **Windows AMD64**: `lmu-racing-telemetry-windows-amd64.exe`
        - **Linux AMD64**: `lmu-racing-telemetry-linux-amd64`
        - **macOS AMD64**: `lmu-racing-telemetry-macos-amd64`
        - **macOS ARM64**: `lmu-racing-telemetry-macos-arm64`
        
        ### Requirements
        - Le Mans Ultimate with WebSocket telemetry enabled
        - Network access to the racing simulator
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "LMU Racing Telemetry ${{ steps.version.outputs.VERSION }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          lmu-racing-telemetry-windows-amd64.exe
          lmu-racing-telemetry-linux-amd64
          lmu-racing-telemetry-macos-amd64
          lmu-racing-telemetry-macos-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}